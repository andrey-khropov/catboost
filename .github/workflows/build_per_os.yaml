name: Build per OS

on:
  workflow_call:
    inputs:
      runs-on_value:
        required: true
        type: string
      revision:
        required: false
        type: string
        default: ${{ github.sha }}
      catboost_package_name:
        required: false
        type: string
        default: catboost_dev
      catboost_package_version:
        required: false
        type: string
        default: ''   # version from repository will be used
      artifacts_version:
        required: false
        type: string
        default: ${{ github.sha }}
      artifact_retention_days:
        required: false
        type: number
        default: 3

jobs:
  build:
    runs-on: ${{ inputs.runs-on_value }}
    env:
      CATBOOST_PACKAGE_NAME: ${{ inputs.catboost_package_name }}
      CATBOOST_PACKAGE_VERSION: ${{ inputs.catboost_package_version }}
      CMAKE_BUILD_CACHE_DIR: cmake_build_cache
    steps:
      - name: Get short SHA
        shell: pwsh
        run: echo "GITHUB_SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

      - if: inputs.runs-on_value == 'ubuntu-22.04'
        name: Checkout actions from catboost
        uses: actions/checkout@v4
        with:
          path: actions_from_catboost
          sparse-checkout: .github
          fetch-depth: 0

      - if: inputs.runs-on_value == 'ubuntu-22.04'
        name: 'Maximize build space: stage 1'
        # Remove packages & tools cache not covered by easimon/maximize-build-space action
        uses: ./actions_from_catboost/.github/actions/build_linux_docker_cleanup_unneeded

      - if: inputs.runs-on_value == 'ubuntu-22.04'
        name: 'Maximize build space: stage 2'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 45000  # needed for docker image
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - if: inputs.runs-on_value == 'macos-14'
        name: Get python_versions_macos_arm64 from cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          fail-on-cache-miss: true
          path: python_versions_macos_arm64.zip
          key: python_versions_macos_arm64-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            python_versions_macos_arm64

      - if: inputs.runs-on_value == 'macos-14'
        name: Set python 3.12 as default
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - if: inputs.runs-on_value == 'macos-14'
        name: Env setup on macOS
        run: |
          python3 -m venv ${{ github.workspace }}/venv
          source ${{ github.workspace }}/venv/bin/activate
          python3 -m pip install -U conan==2.4.1 setuptools wheel jupyterlab==3.0.6 build
          python3 -m pip install --upgrade pip setuptools wheel

          brew update
          brew install ninja

          npm install --global rimraf

          export CMAKE_BUILD_ENV_ROOT=${{ github.workspace }}/cmake_build_env_root


          mkdir -p $CMAKE_BUILD_ENV_ROOT/darwin-arm64

          # JDK
          cd $CMAKE_BUILD_ENV_ROOT/darwin-arm64
          mkdir -p Library/Java/JavaVirtualMachines
          cd Library/Java/JavaVirtualMachines
          wget https://cdn.azul.com/zulu/bin/zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz
          tar xzvf zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64.tar.gz
          ln -s ./zulu8.78.0.19-ca-jdk8.0.412-macosx_aarch64/zulu-8.jdk ./jdk-8

          # Python
          cd $CMAKE_BUILD_ENV_ROOT/darwin-arm64
          mkdir -p Python
          cd Python
          unzip ${{ github.workspace }}/python_versions_macos_arm64

          export DEVELOPER_DIR=/Applications/Xcode_16.2.app

      # Python 3.13 is not included in the standard 'windows-2022' image yet.
      # Should be available soon: https://github.com/actions/runner-images/pull/11438
      - if: inputs.runs-on_value == 'windows-2022'
        name: Install python3.13 on Windows
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - if: inputs.runs-on_value == 'windows-2022'
        name: Install CUDA on Windows
        uses: Jimver/cuda-toolkit@v0.2.15
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
          method: 'network'
          sub-packages: '["nvcc","cudart","thrust"]'

      - if: inputs.runs-on_value == 'windows-2022'
        name: Env setup on Windows
        run: |
          python -m pip install -U conan==2.4.1 setuptools wheel jupyterlab==3.0.6 build

          choco install ninja

          npm install --global rimraf

          $CMAKE_BUILD_ENV_ROOT="${{ github.workspace }}\cmake_build_env_root"

          New-Item $CMAKE_BUILD_ENV_ROOT\windows-x86_64 -ItemType Directory

          # JDK
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path .\jdk-8 -ItemType SymbolicLink -Value $Env:JAVA_HOME_8_X64

          # Python
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path Python -ItemType Directory
          Set-Location -Path .\Python
          New-Item -Path .\3.8 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.8.*\x64"
          New-Item -Path .\3.9 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.9.*\x64"
          New-Item -Path .\3.10 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.10.*\x64"
          New-Item -Path .\3.11 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.11.*\x64"
          New-Item -Path .\3.12 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.12.*\x64"
          New-Item -Path .\3.13 -ItemType SymbolicLink -Value "$Env:RUNNER_TOOL_CACHE\Python\3.13.*\x64"

          foreach($PY_VER in '3.8','3.9','3.10','3.11','3.12','3.13') {
            & "$CMAKE_BUILD_ENV_ROOT\windows-x86_64\Python\$PY_VER\python.exe" -m pip install --upgrade pip setuptools wheel
          }

          # CUDA
          Set-Location -Path $CMAKE_BUILD_ENV_ROOT\windows-x86_64
          New-Item -Path CUDA -ItemType Directory
          New-Item -Path .\CUDA\v11.8 -ItemType SymbolicLink -Value "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"


      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: catboost
          fetch-depth: 0

      - name: Update CMake build cache on every commit
        uses: actions/cache@v4
        with:
          path: cmake_build_cache
          key: cmake_build_cache-${{ runner.os }}-${{ github.run_id }} # Can use time based key as well
          restore-keys: |
            cmake_build_cache-${{ runner.os }}

      - name: Prepare CMake build cache
        shell: pwsh
        run: |
          if (Test-Path cmake_build_cache) {
            if (Test-Path cmake_build_cache/git_commit_sha) {
              # Set timestamps such as that only files changed after the commit in cache are newer than its files
              Set-Location -LiteralPath ${{ github.workspace }}/catboost
              git checkout (Get-Content ${{ github.workspace }}/cmake_build_cache/git_commit_sha)
              Start-Sleep -Seconds 2  # to make sure timestamps are different
              Set-Location -LiteralPath ${{ github.workspace }}/cmake_build_cache
              dir -R | foreach { $_.LastWriteTime = [System.DateTime]::Now }
              Start-Sleep -Seconds 2  # to make sure timestamps are different
            }
          } else {
            New-Item -Path cmake_build_cache -ItemType Directory
          }
          Set-Location -LiteralPath ${{ github.workspace }}/catboost
          git checkout ${{ inputs.revision }}

      - name: Fixup python package version
        shell: pwsh
        run: |
          Set-Location -Path catboost
          python ./ci/fixup_python_version.py

      - if: inputs.runs-on_value == 'ubuntu-22.04'
        name: Build all in container
        run: |
          mkdir -p ${{ github.workspace }}/catboost_build_home
          rm -fr ${{ github.workspace }}/catboost_build_home/*
          docker run --rm --name=catboost_build --user $(id -u):$(id -g) -v /etc/passwd:/etc/passwd -v ${{ github.workspace }}/catboost_build_home:$HOME -v ${{ github.workspace }}/catboost:/src/catboost -v ${{ github.workspace }}/$CMAKE_BUILD_CACHE_DIR:/cmake_build_cache -e CATBOOST_PACKAGE_NAME -e CATBOOST_PACKAGE_VERSION ghcr.io/catboost/manylinux2014_x86_64_and_cross_arm64_for_catboost_ci:latest bash -c ". /work/setup_env/build_x86_64.sh && export CMAKE_BUILD_CACHE_DIR=/cmake_build_cache/ && ln -sf /opt/cmake_build_env_root $HOME/ && rsync -rptl /opt/.conan2 $HOME/ && python3 -m pip install conan==2.4.1 && cd /src/catboost && ./ci/build_all.py  --build-test-tools"

      - if: inputs.runs-on_value == 'macos-14'
        name: Build all without container
        run: |
          export DEVELOPER_DIR=/Applications/Xcode_16.2.app
          export CMAKE_BUILD_ENV_ROOT=${{ github.workspace }}/cmake_build_env_root
          export CMAKE_BUILD_CACHE_DIR=${{ github.workspace }}/cmake_build_cache
          source ${{ github.workspace }}/venv/bin/activate
          python ./catboost/build/build_native.py --build-root-dir ./build_debug --build-type Debug --targets catboost,catboostmodel_static,_hnsw,_catboost,catboostmodel,catboost_train_interface,catboost4j-prediction,catboost4j-spark-impl,catboost4j-spark-impl-cpp,limited_precision_dsv_diff,limited_precision_json_diff,model_comparator
